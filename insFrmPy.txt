from flask import Flask, request, render_template, jsonify
from openpyxl import load_workbook
import sqlite3
from datetime import datetime

app = Flask(__name__)

# Define a mapping between Excel columns and SQL columns
column_mapping = {
    'Defect ID': 'defect_id',
    'Summary': 'summary',
    'Description': 'description',
    'Status': 'status',
    'Priority': 'priority',
    'Severity': 'severity',
    'Owner': 'owner',
    'Open Date': 'open_date',
    'Close Date': 'close_date',
    'Environment': 'environment',
    'Application Name': 'application_name',
    'Release Version': 'release_version',
    'Reported By': 'reported_by',
    'Reported Date': 'reported_date',
    'Steps to Reproduce': 'steps_to_reproduce',
    'Actual Result': 'actual_result',
    'Expected Result': 'expected_result',
    'Attachments': 'attachments',
    'Comments': 'comments',
    'Iteration': 'iteration',
    'Resolution': 'resolution'
}

# Define a mapping for severity transformation
severity_mapping = {
    1: 'Critical',
    2: 'High',
    3: 'Medium',
    4: 'Low'
}

@app.route('/bulk_upload')
def bulk_upload_page():
    return render_template('bulk_upload.html')

@app.route('/bulk_upload', methods=['POST'])
def bulk_upload():
    if 'file' not in request.files:
        return 'No file part', 400
    file = request.files['file']
    if file.filename == '':
        return 'No selected file', 400

    try:
        # Load the uploaded Excel file
        workbook = load_workbook(file)
        sheet = workbook.active

        # Connect to the SQLite database
        conn = sqlite3.connect('your_database.db')
        cursor = conn.cursor()

        # Create the table if it does not exist
        create_table_query = '''
        CREATE TABLE IF NOT EXISTS defects (
            defect_id TEXT PRIMARY KEY,
            summary TEXT,
            description TEXT,
            status TEXT,
            priority TEXT,
            severity TEXT,
            owner TEXT,
            open_date DATE,
            close_date DATE,
            environment TEXT,
            application_name TEXT,
            release_version TEXT,
            reported_by TEXT,
            reported_date DATE,
            steps_to_reproduce TEXT,
            actual_result TEXT,
            expected_result TEXT,
            attachments TEXT,
            comments TEXT,
            iteration TEXT,
            resolution TEXT
        )
        '''
        cursor.execute(create_table_query)

        # Get the header row and create index mappings
        header = [cell.value for cell in next(sheet.iter_rows(min_row=1, max_row=1))]
        indices = {col: header.index(col) for col in column_mapping.keys()}

        # Iterate over the rows in the Excel sheet
        for row in sheet.iter_rows(min_row=2, values_only=True):
            defect_id = row[indices['Defect ID']]

            # Transform severity
            severity = severity_mapping.get(row[indices['Severity']], 'Unknown')

            # Extract dates if present
            open_date = row[indices['Open Date']].date() if isinstance(row[indices['Open Date']], datetime) else row[indices['Open Date']]
            close_date = row[indices['Close Date']].date() if isinstance(row[indices['Close Date']], datetime) else row[indices['Close Date']]
            reported_date = row[indices['Reported Date']].date() if isinstance(row[indices['Reported Date']], datetime) else row[indices['Reported Date']]

            # Create the data tuple for insertion or update
            data = (
                defect_id,
                row[indices['Summary']],
                row[indices['Description']],
                row[indices['Status']],
                row[indices['Priority']],
                severity,
                row[indices['Owner']],
                open_date,
                close_date,
                row[indices['Environment']],
                row[indices['Application Name']],
                row[indices['Release Version']],
                row[indices['Reported By']],
                reported_date,
                row[indices['Steps to Reproduce']],
                row[indices['Actual Result']],
                row[indices['Expected Result']],
                row[indices['Attachments']],
                row[indices['Comments']],
                row[indices['Iteration']],
                row[indices['Resolution']]
            )

            # Check if the record exists and perform INSERT or UPDATE
            cursor.execute('''
            INSERT INTO defects (defect_id, summary, description, status, priority, severity, owner, open_date, close_date, environment, application_name, release_version, reported_by, reported_date, steps_to_reproduce, actual_result, expected_result, attachments, comments, iteration, resolution)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ON CONFLICT(defect_id) 
            DO UPDATE SET
                summary = excluded.summary,
                description = excluded.description,
                status = excluded.status,
                priority = excluded.priority,
                severity = excluded.severity,
                owner = excluded.owner,
                open_date = excluded.open_date,
                close_date = excluded.close_date,
                environment = excluded.environment,
                application_name = excluded.application_name,
                release_version = excluded.release_version,
                reported_by = excluded.reported_by,
                reported_date = excluded.reported_date,
                steps_to_reproduce = excluded.steps_to_reproduce,
                actual_result = excluded.actual_result,
                expected_result = excluded.expected_result,
                attachments = excluded.attachments,
                comments = excluded.comments,
                iteration = excluded.iteration,
                resolution = excluded.resolution
            ''', data)

        # Commit the changes and close the connection
        conn.commit()
        conn.close()
        return '', 204
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True)
